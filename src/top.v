/* AUTOMATICALLY GENERATED VERILOG-2001 SOURCE CODE.
** GENERATED BY CLASH 1.6.3. DO NOT MODIFY.
*/
`timescale 100fs/100fs
module top
    ( // Inputs
      input  clk // clock
    , input  rst // reset
    , input [5:0] instr

      // Outputs
    , output wire [7:0] io_out
    );
  // src/Top.hs:13:1-88
  reg [42:0] s1 = {{5'b00000,   5'b00000,   5'b00000,   5'b00000,   5'b00000,   5'b00000,
  5'b00000,   5'b00000},   3'b000};
  wire [4:0] c$case_scrut;
  reg [4:0] c$case_alt;
  // src/Top.hs:11:1-6
  wire [2:0] ptr;
  // src/Top.hs:11:1-6
  wire [39:0] rf;
  reg [42:0] result;
  reg [4:0] c$case_alt_0;
  reg [4:0] c$case_alt_1;
  reg [4:0] c$case_alt_2;
  reg [4:0] c$case_alt_3;
  reg [4:0] c$case_alt_4;
  reg [4:0] c$case_alt_5;
  reg [4:0] c$case_alt_6;
  reg [4:0] c$case_alt_7;
  reg [42:0] result_0;
  reg [42:0] c$case_alt_8;
  reg [42:0] result_1;
  reg [4:0] c$case_alt_9;
  reg [4:0] c$case_alt_10;
  reg [4:0] c$case_alt_11;
  reg [4:0] c$case_alt_12;
  reg [4:0] c$case_alt_13;
  reg [4:0] c$case_alt_14;
  reg [4:0] c$case_alt_15;
  reg [4:0] c$case_alt_16;
  wire [4:0] c$case_alt_17;
  reg [4:0] c$case_alt_18;
  reg [4:0] c$case_alt_19;
  reg [4:0] c$case_alt_20;
  reg [4:0] c$case_alt_21;
  reg [4:0] c$case_alt_22;
  reg [4:0] c$case_alt_23;
  reg [4:0] c$case_alt_24;
  reg [4:0] c$case_alt_25;
  wire [4:0] c$case_alt_26;
  reg [4:0] c$case_alt_27;
  reg [4:0] c$case_alt_28;
  reg [4:0] c$case_alt_29;
  reg [4:0] c$case_alt_30;
  reg [4:0] c$case_alt_31;
  reg [4:0] c$case_alt_32;
  reg [4:0] c$case_alt_33;
  reg [4:0] c$case_alt_34;
  wire [4:0] c$case_alt_35;
  reg [4:0] c$case_alt_36;
  reg [4:0] c$case_alt_37;
  reg [4:0] c$case_alt_38;
  reg [4:0] c$case_alt_39;
  reg [4:0] c$case_alt_40;
  reg [4:0] c$case_alt_41;
  reg [4:0] c$case_alt_42;
  reg [4:0] c$case_alt_43;
  wire [4:0] c$case_alt_44;
  // src/Cpu.hs:32:1-3
  reg [4:0] c$r_case_alt;
  wire [4:0] c$cpu_$j_$j1_$j2_$j3Out;
  wire [3:0] c$cpu_$j_$j1_$j2_$j3Out_app_arg;
  wire [2:0] c$cpu_$j_$j1_$j2Out_app_arg;
  wire [1:0] c$cpu_$j_$j1Out_app_arg;
  wire [4:0] c$cpu_$jOut;
  wire [0:0] c$cpu_$jOut_case_alt;
  wire [2:0] c$cpu_$j_$j1Out;
  wire [1:0] c$cpu_$j_$j1Out_app_arg_0;
  wire [0:0] c$cpu_$jOut_case_alt_0;
  // src/Cpu.hs:32:1-3
  wire [2:0] ptr_0;
  // src/Cpu.hs:32:1-3
  wire [39:0] rf_0;
  wire signed [63:0] c$case_alt_selection_1;
  wire signed [63:0] c$case_alt_selection_0;
  wire [5:0] result_selection_res;
  wire signed [63:0] c$case_alt_selection_4;
  wire signed [63:0] c$case_alt_selection_3;
  wire signed [63:0] c$case_alt_selection_7;
  wire signed [63:0] c$case_alt_selection_6;
  wire signed [63:0] c$case_alt_selection_10;
  wire signed [63:0] c$case_alt_selection_9;
  wire signed [63:0] c$case_alt_selection_13;
  wire signed [63:0] c$case_alt_selection_12;
  wire signed [63:0] c$case_alt_selection_16;
  wire signed [63:0] c$case_alt_selection_15;
  wire signed [63:0] c$case_alt_selection_19;
  wire signed [63:0] c$case_alt_selection_18;
  wire signed [63:0] c$case_alt_selection_22;
  wire signed [63:0] c$case_alt_selection_21;
  wire signed [63:0] c$case_alt_selection_25;
  wire signed [63:0] c$case_alt_selection_24;
  wire [5:0] result_selection_res_0;
  wire [5:0] result_selection_res_1;
  wire signed [63:0] c$case_alt_selection_29;
  wire signed [63:0] c$case_alt_selection_28;
  wire signed [63:0] c$case_alt_selection_32;
  wire signed [63:0] c$case_alt_selection_31;
  wire signed [63:0] c$case_alt_selection_35;
  wire signed [63:0] c$case_alt_selection_34;
  wire signed [63:0] c$case_alt_selection_38;
  wire signed [63:0] c$case_alt_selection_37;
  wire signed [63:0] c$case_alt_selection_41;
  wire signed [63:0] c$case_alt_selection_40;
  wire signed [63:0] c$case_alt_selection_44;
  wire signed [63:0] c$case_alt_selection_43;
  wire signed [63:0] c$case_alt_selection_47;
  wire signed [63:0] c$case_alt_selection_46;
  wire signed [63:0] c$case_alt_selection_50;
  wire signed [63:0] c$case_alt_selection_49;
  wire signed [63:0] c$case_alt_selection_53;
  wire signed [63:0] c$case_alt_selection_52;
  wire signed [63:0] c$case_alt_selection_56;
  wire signed [63:0] c$case_alt_selection_55;
  wire signed [63:0] c$case_alt_selection_59;
  wire signed [63:0] c$case_alt_selection_58;
  wire signed [63:0] c$case_alt_selection_62;
  wire signed [63:0] c$case_alt_selection_61;
  wire signed [63:0] c$case_alt_selection_65;
  wire signed [63:0] c$case_alt_selection_64;
  wire signed [63:0] c$case_alt_selection_68;
  wire signed [63:0] c$case_alt_selection_67;
  wire signed [63:0] c$case_alt_selection_71;
  wire signed [63:0] c$case_alt_selection_70;
  wire signed [63:0] c$case_alt_selection_74;
  wire signed [63:0] c$case_alt_selection_73;
  wire signed [63:0] c$case_alt_selection_77;
  wire signed [63:0] c$case_alt_selection_76;
  wire signed [63:0] c$case_alt_selection_80;
  wire signed [63:0] c$case_alt_selection_79;
  wire signed [63:0] c$case_alt_selection_83;
  wire signed [63:0] c$case_alt_selection_82;
  wire signed [63:0] c$case_alt_selection_86;
  wire signed [63:0] c$case_alt_selection_85;
  wire signed [63:0] c$case_alt_selection_89;
  wire signed [63:0] c$case_alt_selection_88;
  wire signed [63:0] c$case_alt_selection_92;
  wire signed [63:0] c$case_alt_selection_91;
  wire signed [63:0] c$case_alt_selection_95;
  wire signed [63:0] c$case_alt_selection_94;
  wire signed [63:0] c$case_alt_selection_98;
  wire signed [63:0] c$case_alt_selection_97;
  wire signed [63:0] c$case_alt_selection_101;
  wire signed [63:0] c$case_alt_selection_100;
  wire signed [63:0] c$case_alt_selection_104;
  wire signed [63:0] c$case_alt_selection_103;
  wire signed [63:0] c$case_alt_selection_107;
  wire signed [63:0] c$case_alt_selection_106;
  wire signed [63:0] c$case_alt_selection_110;
  wire signed [63:0] c$case_alt_selection_109;
  wire signed [63:0] c$case_alt_selection_113;
  wire signed [63:0] c$case_alt_selection_112;
  wire signed [63:0] c$case_alt_selection_116;
  wire signed [63:0] c$case_alt_selection_115;
  wire signed [63:0] c$case_alt_selection_119;
  wire signed [63:0] c$case_alt_selection_118;
  wire signed [63:0] c$case_alt_selection_122;
  wire signed [63:0] c$case_alt_selection_121;
  wire signed [63:0] c$r_case_alt_selection_1;
  wire signed [63:0] c$r_case_alt_selection_0;

  // register begin
  always @(posedge clk or  posedge  rst) begin : s1_register
    if ( rst) begin
      s1 <= {{5'b00000,   5'b00000,   5'b00000,   5'b00000,   5'b00000,   5'b00000,
    5'b00000,   5'b00000},   3'b000};
    end else begin
      s1 <= result;
    end
  end
  // register end

  assign io_out = {1'b0,   1'b0,   1'b0,
                   c$case_scrut[4:4],   c$case_scrut[3:3],
                   c$case_scrut[2:2],   c$case_scrut[1:1],
                   c$case_scrut[0:0]};

  assign c$case_scrut = c$case_alt;

  assign c$case_alt_selection_1 = c$case_alt_selection_0;

  assign c$case_alt_selection_0 = $unsigned({{(64-3) {1'b0}},ptr});

  always @(*) begin
    case(c$case_alt_selection_1)
      64'sd1 : c$case_alt = rf[34:30];
      64'sd2 : c$case_alt = rf[29:25];
      64'sd3 : c$case_alt = rf[24:20];
      64'sd4 : c$case_alt = rf[19:15];
      64'sd5 : c$case_alt = rf[14:10];
      64'sd6 : c$case_alt = rf[9:5];
      64'sd7 : c$case_alt = rf[4:0];
      default : c$case_alt = rf[39:35];
    endcase
  end

  assign ptr = s1[2:0];

  assign rf = s1[42:3];

  assign result_selection_res = 6'b100000 & instr;

  always @(*) begin
    case(result_selection_res)
      6'b000000 : result = {{c$case_alt_7,
                             c$case_alt_6,   c$case_alt_5,   c$case_alt_4,
                             c$case_alt_3,   c$case_alt_2,   c$case_alt_1,
                             c$case_alt_0},   ptr_0};
      default : result = result_0;
    endcase
  end

  assign c$case_alt_selection_4 = c$case_alt_selection_3;

  assign c$case_alt_selection_3 = $unsigned({{(64-3) {1'b0}},ptr_0});

  always @(*) begin
    case(c$case_alt_selection_4)
      64'sd7 : c$case_alt_0 = c$cpu_$j_$j1_$j2_$j3Out;
      default : c$case_alt_0 = rf_0[4:0];
    endcase
  end

  assign c$case_alt_selection_7 = c$case_alt_selection_6;

  assign c$case_alt_selection_6 = $unsigned({{(64-3) {1'b0}},ptr_0});

  always @(*) begin
    case(c$case_alt_selection_7)
      64'sd6 : c$case_alt_1 = c$cpu_$j_$j1_$j2_$j3Out;
      default : c$case_alt_1 = rf_0[9:5];
    endcase
  end

  assign c$case_alt_selection_10 = c$case_alt_selection_9;

  assign c$case_alt_selection_9 = $unsigned({{(64-3) {1'b0}},ptr_0});

  always @(*) begin
    case(c$case_alt_selection_10)
      64'sd5 : c$case_alt_2 = c$cpu_$j_$j1_$j2_$j3Out;
      default : c$case_alt_2 = rf_0[14:10];
    endcase
  end

  assign c$case_alt_selection_13 = c$case_alt_selection_12;

  assign c$case_alt_selection_12 = $unsigned({{(64-3) {1'b0}},ptr_0});

  always @(*) begin
    case(c$case_alt_selection_13)
      64'sd4 : c$case_alt_3 = c$cpu_$j_$j1_$j2_$j3Out;
      default : c$case_alt_3 = rf_0[19:15];
    endcase
  end

  assign c$case_alt_selection_16 = c$case_alt_selection_15;

  assign c$case_alt_selection_15 = $unsigned({{(64-3) {1'b0}},ptr_0});

  always @(*) begin
    case(c$case_alt_selection_16)
      64'sd3 : c$case_alt_4 = c$cpu_$j_$j1_$j2_$j3Out;
      default : c$case_alt_4 = rf_0[24:20];
    endcase
  end

  assign c$case_alt_selection_19 = c$case_alt_selection_18;

  assign c$case_alt_selection_18 = $unsigned({{(64-3) {1'b0}},ptr_0});

  always @(*) begin
    case(c$case_alt_selection_19)
      64'sd2 : c$case_alt_5 = c$cpu_$j_$j1_$j2_$j3Out;
      default : c$case_alt_5 = rf_0[29:25];
    endcase
  end

  assign c$case_alt_selection_22 = c$case_alt_selection_21;

  assign c$case_alt_selection_21 = $unsigned({{(64-3) {1'b0}},ptr_0});

  always @(*) begin
    case(c$case_alt_selection_22)
      64'sd1 : c$case_alt_6 = c$cpu_$j_$j1_$j2_$j3Out;
      default : c$case_alt_6 = rf_0[34:30];
    endcase
  end

  assign c$case_alt_selection_25 = c$case_alt_selection_24;

  assign c$case_alt_selection_24 = $unsigned({{(64-3) {1'b0}},ptr_0});

  always @(*) begin
    case(c$case_alt_selection_25)
      64'sd0 : c$case_alt_7 = c$cpu_$j_$j1_$j2_$j3Out;
      default : c$case_alt_7 = rf_0[39:35];
    endcase
  end

  assign result_selection_res_0 = 6'b111000 & instr;

  always @(*) begin
    case(result_selection_res_0)
      6'b100000 : result_0 = {rf_0,
                              c$cpu_$j_$j1Out};
      6'b101000 : result_0 = c$case_alt_8;
      default : result_0 = result_1;
    endcase
  end

  always @(*) begin
    case(c$r_case_alt)
      5'b00000 : c$case_alt_8 = {rf_0,
                                 c$cpu_$j_$j1Out};
      default : c$case_alt_8 = {rf_0,
                                ptr_0 + 3'b001};
    endcase
  end

  assign result_selection_res_1 = 6'b111100 & instr;

  always @(*) begin
    case(result_selection_res_1)
      6'b110000 : result_1 = {{c$case_alt_43,
                               c$case_alt_42,   c$case_alt_41,
                               c$case_alt_40,   c$case_alt_39,
                               c$case_alt_38,   c$case_alt_37,
                               c$case_alt_36},   ptr_0};
      6'b110100 : result_1 = {{c$case_alt_34,
                               c$case_alt_33,   c$case_alt_32,
                               c$case_alt_31,   c$case_alt_30,
                               c$case_alt_29,   c$case_alt_28,
                               c$case_alt_27},   ptr_0};
      6'b111000 : result_1 = {{c$case_alt_25,
                               c$case_alt_24,   c$case_alt_23,
                               c$case_alt_22,   c$case_alt_21,
                               c$case_alt_20,   c$case_alt_19,
                               c$case_alt_18},   ptr_0};
      6'b111100 : result_1 = {{c$case_alt_16,
                               c$case_alt_15,   c$case_alt_14,
                               c$case_alt_13,   c$case_alt_12,
                               c$case_alt_11,   c$case_alt_10,
                               c$case_alt_9},   ptr_0};
      default : result_1 = s1;
    endcase
  end

  assign c$case_alt_selection_29 = c$case_alt_selection_28;

  assign c$case_alt_selection_28 = $unsigned({{(64-3) {1'b0}},ptr_0});

  always @(*) begin
    case(c$case_alt_selection_29)
      64'sd7 : c$case_alt_9 = c$case_alt_17;
      default : c$case_alt_9 = rf_0[4:0];
    endcase
  end

  assign c$case_alt_selection_32 = c$case_alt_selection_31;

  assign c$case_alt_selection_31 = $unsigned({{(64-3) {1'b0}},ptr_0});

  always @(*) begin
    case(c$case_alt_selection_32)
      64'sd6 : c$case_alt_10 = c$case_alt_17;
      default : c$case_alt_10 = rf_0[9:5];
    endcase
  end

  assign c$case_alt_selection_35 = c$case_alt_selection_34;

  assign c$case_alt_selection_34 = $unsigned({{(64-3) {1'b0}},ptr_0});

  always @(*) begin
    case(c$case_alt_selection_35)
      64'sd5 : c$case_alt_11 = c$case_alt_17;
      default : c$case_alt_11 = rf_0[14:10];
    endcase
  end

  assign c$case_alt_selection_38 = c$case_alt_selection_37;

  assign c$case_alt_selection_37 = $unsigned({{(64-3) {1'b0}},ptr_0});

  always @(*) begin
    case(c$case_alt_selection_38)
      64'sd4 : c$case_alt_12 = c$case_alt_17;
      default : c$case_alt_12 = rf_0[19:15];
    endcase
  end

  assign c$case_alt_selection_41 = c$case_alt_selection_40;

  assign c$case_alt_selection_40 = $unsigned({{(64-3) {1'b0}},ptr_0});

  always @(*) begin
    case(c$case_alt_selection_41)
      64'sd3 : c$case_alt_13 = c$case_alt_17;
      default : c$case_alt_13 = rf_0[24:20];
    endcase
  end

  assign c$case_alt_selection_44 = c$case_alt_selection_43;

  assign c$case_alt_selection_43 = $unsigned({{(64-3) {1'b0}},ptr_0});

  always @(*) begin
    case(c$case_alt_selection_44)
      64'sd2 : c$case_alt_14 = c$case_alt_17;
      default : c$case_alt_14 = rf_0[29:25];
    endcase
  end

  assign c$case_alt_selection_47 = c$case_alt_selection_46;

  assign c$case_alt_selection_46 = $unsigned({{(64-3) {1'b0}},ptr_0});

  always @(*) begin
    case(c$case_alt_selection_47)
      64'sd1 : c$case_alt_15 = c$case_alt_17;
      default : c$case_alt_15 = rf_0[34:30];
    endcase
  end

  assign c$case_alt_selection_50 = c$case_alt_selection_49;

  assign c$case_alt_selection_49 = $unsigned({{(64-3) {1'b0}},ptr_0});

  always @(*) begin
    case(c$case_alt_selection_50)
      64'sd0 : c$case_alt_16 = c$case_alt_17;
      default : c$case_alt_16 = rf_0[39:35];
    endcase
  end

  assign c$case_alt_17 = c$r_case_alt << 64'sd1;

  assign c$case_alt_selection_53 = c$case_alt_selection_52;

  assign c$case_alt_selection_52 = $unsigned({{(64-3) {1'b0}},ptr_0});

  always @(*) begin
    case(c$case_alt_selection_53)
      64'sd7 : c$case_alt_18 = c$case_alt_26;
      default : c$case_alt_18 = rf_0[4:0];
    endcase
  end

  assign c$case_alt_selection_56 = c$case_alt_selection_55;

  assign c$case_alt_selection_55 = $unsigned({{(64-3) {1'b0}},ptr_0});

  always @(*) begin
    case(c$case_alt_selection_56)
      64'sd6 : c$case_alt_19 = c$case_alt_26;
      default : c$case_alt_19 = rf_0[9:5];
    endcase
  end

  assign c$case_alt_selection_59 = c$case_alt_selection_58;

  assign c$case_alt_selection_58 = $unsigned({{(64-3) {1'b0}},ptr_0});

  always @(*) begin
    case(c$case_alt_selection_59)
      64'sd5 : c$case_alt_20 = c$case_alt_26;
      default : c$case_alt_20 = rf_0[14:10];
    endcase
  end

  assign c$case_alt_selection_62 = c$case_alt_selection_61;

  assign c$case_alt_selection_61 = $unsigned({{(64-3) {1'b0}},ptr_0});

  always @(*) begin
    case(c$case_alt_selection_62)
      64'sd4 : c$case_alt_21 = c$case_alt_26;
      default : c$case_alt_21 = rf_0[19:15];
    endcase
  end

  assign c$case_alt_selection_65 = c$case_alt_selection_64;

  assign c$case_alt_selection_64 = $unsigned({{(64-3) {1'b0}},ptr_0});

  always @(*) begin
    case(c$case_alt_selection_65)
      64'sd3 : c$case_alt_22 = c$case_alt_26;
      default : c$case_alt_22 = rf_0[24:20];
    endcase
  end

  assign c$case_alt_selection_68 = c$case_alt_selection_67;

  assign c$case_alt_selection_67 = $unsigned({{(64-3) {1'b0}},ptr_0});

  always @(*) begin
    case(c$case_alt_selection_68)
      64'sd2 : c$case_alt_23 = c$case_alt_26;
      default : c$case_alt_23 = rf_0[29:25];
    endcase
  end

  assign c$case_alt_selection_71 = c$case_alt_selection_70;

  assign c$case_alt_selection_70 = $unsigned({{(64-3) {1'b0}},ptr_0});

  always @(*) begin
    case(c$case_alt_selection_71)
      64'sd1 : c$case_alt_24 = c$case_alt_26;
      default : c$case_alt_24 = rf_0[34:30];
    endcase
  end

  assign c$case_alt_selection_74 = c$case_alt_selection_73;

  assign c$case_alt_selection_73 = $unsigned({{(64-3) {1'b0}},ptr_0});

  always @(*) begin
    case(c$case_alt_selection_74)
      64'sd0 : c$case_alt_25 = c$case_alt_26;
      default : c$case_alt_25 = rf_0[39:35];
    endcase
  end

  assign c$case_alt_26 = ~ c$r_case_alt;

  assign c$case_alt_selection_77 = c$case_alt_selection_76;

  assign c$case_alt_selection_76 = $unsigned({{(64-3) {1'b0}},ptr_0});

  always @(*) begin
    case(c$case_alt_selection_77)
      64'sd7 : c$case_alt_27 = c$case_alt_35;
      default : c$case_alt_27 = rf_0[4:0];
    endcase
  end

  assign c$case_alt_selection_80 = c$case_alt_selection_79;

  assign c$case_alt_selection_79 = $unsigned({{(64-3) {1'b0}},ptr_0});

  always @(*) begin
    case(c$case_alt_selection_80)
      64'sd6 : c$case_alt_28 = c$case_alt_35;
      default : c$case_alt_28 = rf_0[9:5];
    endcase
  end

  assign c$case_alt_selection_83 = c$case_alt_selection_82;

  assign c$case_alt_selection_82 = $unsigned({{(64-3) {1'b0}},ptr_0});

  always @(*) begin
    case(c$case_alt_selection_83)
      64'sd5 : c$case_alt_29 = c$case_alt_35;
      default : c$case_alt_29 = rf_0[14:10];
    endcase
  end

  assign c$case_alt_selection_86 = c$case_alt_selection_85;

  assign c$case_alt_selection_85 = $unsigned({{(64-3) {1'b0}},ptr_0});

  always @(*) begin
    case(c$case_alt_selection_86)
      64'sd4 : c$case_alt_30 = c$case_alt_35;
      default : c$case_alt_30 = rf_0[19:15];
    endcase
  end

  assign c$case_alt_selection_89 = c$case_alt_selection_88;

  assign c$case_alt_selection_88 = $unsigned({{(64-3) {1'b0}},ptr_0});

  always @(*) begin
    case(c$case_alt_selection_89)
      64'sd3 : c$case_alt_31 = c$case_alt_35;
      default : c$case_alt_31 = rf_0[24:20];
    endcase
  end

  assign c$case_alt_selection_92 = c$case_alt_selection_91;

  assign c$case_alt_selection_91 = $unsigned({{(64-3) {1'b0}},ptr_0});

  always @(*) begin
    case(c$case_alt_selection_92)
      64'sd2 : c$case_alt_32 = c$case_alt_35;
      default : c$case_alt_32 = rf_0[29:25];
    endcase
  end

  assign c$case_alt_selection_95 = c$case_alt_selection_94;

  assign c$case_alt_selection_94 = $unsigned({{(64-3) {1'b0}},ptr_0});

  always @(*) begin
    case(c$case_alt_selection_95)
      64'sd1 : c$case_alt_33 = c$case_alt_35;
      default : c$case_alt_33 = rf_0[34:30];
    endcase
  end

  assign c$case_alt_selection_98 = c$case_alt_selection_97;

  assign c$case_alt_selection_97 = $unsigned({{(64-3) {1'b0}},ptr_0});

  always @(*) begin
    case(c$case_alt_selection_98)
      64'sd0 : c$case_alt_34 = c$case_alt_35;
      default : c$case_alt_34 = rf_0[39:35];
    endcase
  end

  assign c$case_alt_35 = c$r_case_alt - c$cpu_$jOut;

  assign c$case_alt_selection_101 = c$case_alt_selection_100;

  assign c$case_alt_selection_100 = $unsigned({{(64-3) {1'b0}},ptr_0});

  always @(*) begin
    case(c$case_alt_selection_101)
      64'sd7 : c$case_alt_36 = c$case_alt_44;
      default : c$case_alt_36 = rf_0[4:0];
    endcase
  end

  assign c$case_alt_selection_104 = c$case_alt_selection_103;

  assign c$case_alt_selection_103 = $unsigned({{(64-3) {1'b0}},ptr_0});

  always @(*) begin
    case(c$case_alt_selection_104)
      64'sd6 : c$case_alt_37 = c$case_alt_44;
      default : c$case_alt_37 = rf_0[9:5];
    endcase
  end

  assign c$case_alt_selection_107 = c$case_alt_selection_106;

  assign c$case_alt_selection_106 = $unsigned({{(64-3) {1'b0}},ptr_0});

  always @(*) begin
    case(c$case_alt_selection_107)
      64'sd5 : c$case_alt_38 = c$case_alt_44;
      default : c$case_alt_38 = rf_0[14:10];
    endcase
  end

  assign c$case_alt_selection_110 = c$case_alt_selection_109;

  assign c$case_alt_selection_109 = $unsigned({{(64-3) {1'b0}},ptr_0});

  always @(*) begin
    case(c$case_alt_selection_110)
      64'sd4 : c$case_alt_39 = c$case_alt_44;
      default : c$case_alt_39 = rf_0[19:15];
    endcase
  end

  assign c$case_alt_selection_113 = c$case_alt_selection_112;

  assign c$case_alt_selection_112 = $unsigned({{(64-3) {1'b0}},ptr_0});

  always @(*) begin
    case(c$case_alt_selection_113)
      64'sd3 : c$case_alt_40 = c$case_alt_44;
      default : c$case_alt_40 = rf_0[24:20];
    endcase
  end

  assign c$case_alt_selection_116 = c$case_alt_selection_115;

  assign c$case_alt_selection_115 = $unsigned({{(64-3) {1'b0}},ptr_0});

  always @(*) begin
    case(c$case_alt_selection_116)
      64'sd2 : c$case_alt_41 = c$case_alt_44;
      default : c$case_alt_41 = rf_0[29:25];
    endcase
  end

  assign c$case_alt_selection_119 = c$case_alt_selection_118;

  assign c$case_alt_selection_118 = $unsigned({{(64-3) {1'b0}},ptr_0});

  always @(*) begin
    case(c$case_alt_selection_119)
      64'sd1 : c$case_alt_42 = c$case_alt_44;
      default : c$case_alt_42 = rf_0[34:30];
    endcase
  end

  assign c$case_alt_selection_122 = c$case_alt_selection_121;

  assign c$case_alt_selection_121 = $unsigned({{(64-3) {1'b0}},ptr_0});

  always @(*) begin
    case(c$case_alt_selection_122)
      64'sd0 : c$case_alt_43 = c$case_alt_44;
      default : c$case_alt_43 = rf_0[39:35];
    endcase
  end

  assign c$case_alt_44 = c$r_case_alt + c$cpu_$jOut;

  assign c$r_case_alt_selection_1 = c$r_case_alt_selection_0;

  assign c$r_case_alt_selection_0 = $unsigned({{(64-3) {1'b0}},ptr_0});

  always @(*) begin
    case(c$r_case_alt_selection_1)
      64'sd1 : c$r_case_alt = rf_0[34:30];
      64'sd2 : c$r_case_alt = rf_0[29:25];
      64'sd3 : c$r_case_alt = rf_0[24:20];
      64'sd4 : c$r_case_alt = rf_0[19:15];
      64'sd5 : c$r_case_alt = rf_0[14:10];
      64'sd6 : c$r_case_alt = rf_0[9:5];
      64'sd7 : c$r_case_alt = rf_0[4:0];
      default : c$r_case_alt = rf_0[39:35];
    endcase
  end

  assign c$cpu_$j_$j1_$j2_$j3Out = ((instr[64'sd4]) == (1'b1)) ? ({1'b1,c$cpu_$j_$j1_$j2_$j3Out_app_arg}) : ({1'b0,c$cpu_$j_$j1_$j2_$j3Out_app_arg});

  assign c$cpu_$j_$j1_$j2_$j3Out_app_arg = ((instr[64'sd3]) == (1'b1)) ? ({1'b1,c$cpu_$j_$j1_$j2Out_app_arg}) : ({1'b0,c$cpu_$j_$j1_$j2Out_app_arg});

  assign c$cpu_$j_$j1_$j2Out_app_arg = ((instr[64'sd2]) == (1'b1)) ? ({1'b1,c$cpu_$j_$j1Out_app_arg}) : ({1'b0,c$cpu_$j_$j1Out_app_arg});

  assign c$cpu_$j_$j1Out_app_arg = ((instr[64'sd1]) == (1'b1)) ? ({1'b1,c$cpu_$jOut_case_alt_0}) : ({1'b0,c$cpu_$jOut_case_alt_0});

  assign c$cpu_$jOut = ((instr[64'sd0]) == (1'b1)) ? ({3'b000,({c$cpu_$jOut_case_alt,1'b1})}) : ({3'b000,({c$cpu_$jOut_case_alt,1'b0})});

  assign c$cpu_$jOut_case_alt = ((instr[64'sd1]) == (1'b1)) ? 1'b1 : 1'b0;

  assign c$cpu_$j_$j1Out = ((instr[64'sd2]) == (1'b1)) ? ({1'b1,c$cpu_$j_$j1Out_app_arg_0}) : ({1'b0,c$cpu_$j_$j1Out_app_arg_0});

  assign c$cpu_$j_$j1Out_app_arg_0 = ((instr[64'sd1]) == (1'b1)) ? ({1'b1,c$cpu_$jOut_case_alt_0}) : ({1'b0,c$cpu_$jOut_case_alt_0});

  assign c$cpu_$jOut_case_alt_0 = ((instr[64'sd0]) == (1'b1)) ? 1'b1 : 1'b0;

  assign ptr_0 = s1[2:0];

  assign rf_0 = s1[42:3];


endmodule

